from django.urls import reverse, reverse_lazy
from django.views.generic import (
    ListView,
    DetailView,
    CreateView,
    UpdateView,
    DeleteView,
)
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.utils import timezone
from django.contrib import messages
from .models import Post
from .forms import PostForm
from django.db.models import F

class PostListView(ListView):
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤. –î–ª—è staff ‚Äî –≤—Å–µ, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ."""
    model = Post
    template_name = "blog/post_list.html"
    context_object_name = "posts"
    paginate_by = 12

    def get_queryset(self):
        qs = Post.objects.all().order_by("-created_at")
        user = self.request.user
        return qs if (user.is_authenticated and user.is_staff) else qs.filter(is_published=True)


class PostDetailView(DetailView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å—Ç–∞ —Å –∞—Ç–æ–º–∞—Ä–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."""
    model = Post
    template_name = "blog/post_detail.html"
    context_object_name = "post"

    def get_queryset(self):
        qs = super().get_queryset()
        user = self.request.user
        return qs if (user.is_authenticated and user.is_staff) else qs.filter(is_published=True)

    def get_object(self, queryset=None):
        obj = super().get_object(queryset)
        Post.objects.filter(pk=obj.pk).update(views_count=F("views_count") + 1)
        obj.refresh_from_db(fields=["views_count"])
        return obj


class PostCreateView(LoginRequiredMixin, CreateView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞."""
    model = Post
    form_class = PostForm
    template_name = "blog/post_form.html"

    def form_valid(self, form):
        form.instance.created_at = timezone.now()
        messages.success(self.request, f"‚úÖ –ü–æ—Å—Ç ¬´{form.instance.title}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return super().form_valid(form)

    def get_success_url(self):
        return self.object.get_absolute_url()


class PostUpdateView(LoginRequiredMixin, UpdateView):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.
    –î–æ—Å—Ç—É–ø–Ω–æ –õ–Æ–ë–û–ú–£ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∞)."""
    model = Post
    form_class = PostForm
    template_name = "blog/post_form.html"

    def form_valid(self, form):
        messages.success(self.request, f"‚úèÔ∏è –ü–æ—Å—Ç ¬´{form.instance.title}¬ª –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return super().form_valid(form)

    def get_success_url(self):
        return reverse("blog:post_detail", kwargs={"pk": self.object.pk})


class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞. –û—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è staff, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.
    –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —Å–Ω–∏–º–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —É–±—Ä–∞–≤ UserPassesTestMixin –∏ test_func()."""
    model = Post
    template_name = "blog/post_confirm_delete.html"
    success_url = reverse_lazy("blog:post_list")

    def test_func(self):
        return self.request.user.is_staff

    def handle_no_permission(self):
        messages.error(self.request, "–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (staff).")
        return super().handle_no_permission()

    def delete(self, request, *args, **kwargs):
        messages.warning(request, "üóë –ü–æ—Å—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω.")
        return super().delete(request, *args, **kwargs)