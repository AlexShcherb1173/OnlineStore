from django import forms
from django.core.exceptions import ValidationError
from django.forms import RadioSelect, CheckboxSelectMultiple
from .models import Product

# üîí –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±–æ–∏—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞—Ö)
BANNED_WORDS = (
    "–∫–∞–∑–∏–Ω–æ",
    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "–∫—Ä–∏–ø—Ç–∞",
    "–±–∏—Ä–∂–∞",
    "–¥–µ—à–µ–≤–æ",
    "–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    "–æ–±–º–∞–Ω",
    "–ø–æ–ª–∏—Ü–∏—è",
    "—Ä–∞–¥–∞—Ä",
)

# ‚úÖ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ALLOWED_CONTENT_TYPES = ("image/jpeg", "image/png")
ALLOWED_FORMATS = ("JPEG", "PNG")
ALLOWED_EXTS = (".jpg", ".jpeg", ".png")
MAX_IMAGE_BYTES = 5 * 1024 * 1024  # 5 –ú–ë


class BootstrapFormMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π Bootstrap-—Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã.
    –î–µ–ª–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ:
    - checkbox ‚Üí class="form-check-input"
    - select / select multiple ‚Üí class="form-select"
    - radio/checkbox —Å–ø–∏—Å–∫–∏ (RadioSelect / CheckboxSelectMultiple) ‚Üí –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    - file input ‚Üí class="form-control"
    - –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω–ø—É—Ç—ã/textarea ‚Üí class="form-control" """

    def _add_class(self, widget, class_name: str) -> None:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞–µ–º –∫–ª–∞—Å—Å, –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
        current = widget.attrs.get("class", "")
        widget.attrs["class"] = (current + " " + class_name).strip()

    def _init_bootstrap_widgets(self) -> None:
        for name, field in getattr(self, "fields", {}).items():
            widget = getattr(field, "widget", None)
            if widget is None:
                continue  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

            if isinstance(widget, RadioSelect):
                self._add_class(widget, "form-check")  # –æ–±–µ—Ä—Ç–∫–∞ ul/–¥–∏–≤
                # for –æ—Ç–¥–µ–ª—å–Ω—ã–µ input‚Äô—ã radio –∫–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞,
                # –Ω–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª–µ–∑–µ–Ω
                continue

            if isinstance(widget, CheckboxSelectMultiple):
                self._add_class(
                    widget, "form-check"
                )  # –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥—Ä—É–ø–ø—ã —á–µ–∫–±–æ–∫—Å–æ–≤
                continue

                # 2) –ß–µ–∫–±–æ–∫—Å—ã (–æ–±—ã—á–Ω–æ–µ BooleanField ‚Üí CheckboxInput)
            input_type = getattr(widget, "input_type", None)
            if input_type == "checkbox":
                self._add_class(widget, "form-check-input")
                continue

            # 3) Select/SelectMultiple
            from django import forms as _forms

            if isinstance(widget, (_forms.Select, _forms.SelectMultiple)):
                self._add_class(widget, "form-select")
                continue

            # 4) –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è: text/number/email/url/textarea/file –∏ —Ç. –ø.
            #    (–≤ —Ç.—á. ClearableFileInput)
            self._add_class(widget, "form-control")


class ContactForm(forms.Form, BootstrapFormMixin):
    """–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ö–æ–Ω—Ç–∞–∫—Ç—ã".
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –í—Å–µ –ø–æ–ª—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é Bootstrap (form-control)."""

    name = forms.CharField(
        label="–ò–º—è",
        max_length=100,
        widget=forms.TextInput(
            attrs={"class": "form-control", "placeholder": "–í–∞—à–µ –∏–º—è"}
        ),
    )
    phone = forms.CharField(
        label="–¢–µ–ª–µ—Ñ–æ–Ω",
        max_length=20,
        widget=forms.TextInput(
            attrs={"class": "form-control", "placeholder": "–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"}
        ),
    )
    message = forms.CharField(
        label="–°–æ–æ–±—â–µ–Ω–∏–µ",
        widget=forms.Textarea(
            attrs={"class": "form-control", "placeholder": "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
        ),
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._init_bootstrap_widgets()


class ProductForm(forms.ModelForm, BootstrapFormMixin):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏ Product.
    - –°–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª–µ–π `name` –∏ `description` –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (`price`) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Bootstrap-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

    class Meta:
        model = Product
        fields = ["name", "description", "image", "category", "price"]
        widgets = {
            "name": forms.TextInput(
                attrs={"class": "form-control", "placeholder": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"}
            ),
            "description": forms.Textarea(
                attrs={"class": "form-control", "rows": 3, "placeholder": "–û–ø–∏—Å–∞–Ω–∏–µ"}
            ),
            "image": forms.ClearableFileInput(attrs={"class": "form-control"}),
            "category": forms.Select(attrs={"class": "form-select"}),
            "price": forms.NumberInput(
                attrs={"class": "form-control", "step": "0.01", "placeholder": "–¶–µ–Ω–∞"}
            ),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._init_bootstrap_widgets()

    # ---------------------------
    # üî∏ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
    # ---------------------------

    def _validate_banned(self, value: str) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)."""
        if not value:
            return []
        low = value.lower()
        return [w for w in BANNED_WORDS if w in low]

    def clean_name(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–µ `name` –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
        name = self.cleaned_data.get("name") or ""
        hits = self._validate_banned(name)
        if hits:
            raise forms.ValidationError(
                f"‚ùå –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(hits)}."
            )
        return name

    def clean_description(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–µ `description` –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
        desc = self.cleaned_data.get("description") or ""
        hits = self._validate_banned(desc)
        if hits:
            raise forms.ValidationError(
                f"‚ö†Ô∏è –í –æ–ø–∏—Å–∞–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(hits)}."
            )
        return desc

    def clean_price(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è.
        Raises:
            ValidationError: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ –Ω—É–ª—è.
        Returns:
            float: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã."""
        price = self.cleaned_data.get("price")
        if price is not None and price < 0:
            raise ValidationError("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        return price

    def clean_image(self):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
        - —Ñ–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ JPEG –∏–ª–∏ PNG;
        - —Ä–∞–∑–º–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 5 –ú–ë;
        - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —á–µ—Ä–µ–∑ Pillow (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)."""
        img = self.cleaned_data.get("image")
        if not img:
            return img  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if img.size and img.size > MAX_IMAGE_BYTES:
            raise ValidationError("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë.")

        # 2) –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ content_type/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        content_type = getattr(img, "content_type", "") or ""
        name_lower = (img.name or "").lower()
        if content_type and content_type not in ALLOWED_CONTENT_TYPES:
            raise ValidationError("–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è JPEG –∏–ª–∏ PNG.")
        if not name_lower.endswith(ALLOWED_EXTS):
            raise ValidationError("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å .jpg, .jpeg –∏–ª–∏ .png.")

        # 3) –ù–∞–¥—ë–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —á–µ—Ä–µ–∑ Pillow
        try:
            from PIL import Image

            pos = img.file.tell() if hasattr(img.file, "tell") else 0
            img.file.seek(0)
            with Image.open(img.file) as pil_img:
                pil_img.verify()  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
                if pil_img.format not in ALLOWED_FORMATS:
                    raise ValidationError("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JPEG –∏–ª–∏ PNG.")
        except ValidationError:
            raise
        except Exception:
            raise ValidationError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        finally:
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä —Ñ–∞–π–ª–∞ –Ω–∞ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã Django —Å–º–æ–≥ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –ø–æ—Ç–æ–∫
            try:
                img.file.seek(pos)
            except Exception:
                pass

        return img
