import random
from django.core.management.base import BaseCommand
from django.core.management import call_command
from catalog.models import Category, Product
from faker import Faker


class Command(BaseCommand):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
    - –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ;
    - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã;
    - —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏ (--from-fixtures);
    - —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (--count N);
    - –±–µ–∑–æ–ø–∞—Å–Ω–∞ ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–∫—Å—Ç—É—Ä.
    """

    help = "–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏."

    def add_arguments(self, parser):
        parser.add_argument(
            "--from-fixtures",
            action="store_true",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä (catalog/fixtures/categories.json –∏ products.json).",
        )
        parser.add_argument(
            "--sample",
            action="store_true",
            help="–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).",
        )
        parser.add_argument(
            "--count",
            type=int,
            default=0,
            help="–°–æ–∑–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Faker).",
        )

    def handle(self, *args, **options):
        fake = Faker("ru_RU")

        self.stdout.write("üßπ –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        Product.objects.all().delete()
        Category.objects.all().delete()

        # === 1. –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä ===
        if options["from_fixtures"]:
            self.stdout.write("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä...")
            try:
                call_command("loaddata", "catalog/fixtures/categories.json")
                call_command("loaddata", "catalog/fixtures/products.json")
                self.stdout.write(self.style.SUCCESS("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä!"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–∫—Å—Ç—É—Ä: {e}"))
            return  # üîπ –≤—ã—Ö–æ–¥–∏–º ‚Äî –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        # === 2. –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ from-fixtures) ===
        self.stdout.write("üì¶ –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        categories = [
            Category.objects.create(name="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", description="–ì–∞–¥–∂–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞"),
            Category.objects.create(name="–û–¥–µ–∂–¥–∞", description="–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞"),
            Category.objects.create(name="–ö–Ω–∏–≥–∏", description="–ü–µ—á–∞—Ç–Ω—ã–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è"),
            Category.objects.create(name="–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", description="–¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞"),
        ]

        # === 3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω --count ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ===
        if options["count"] > 0:
            count = options["count"]
            self.stdout.write(f"üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {count} —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")

            for _ in range(count):
                category = random.choice(categories)
                name = fake.sentence(nb_words=3).replace(".", "")
                description = fake.text(max_nb_chars=120)
                price = round(random.uniform(100, 50000), 2)

                Product.objects.create(
                    name=name,
                    description=description,
                    price=price,
                    category=category,
                )

            self.stdout.write(self.style.SUCCESS(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤!"))
            return

        # === 4. –ï—Å–ª–∏ –Ω–µ—Ç count ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ===
        self.stdout.write("üõ† –°–æ–∑–¥–∞—ë–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã...")

        electronics, clothes, books, appliances = categories

        Product.objects.create(
            name="–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung S24",
            description="–§–ª–∞–≥–º–∞–Ω 2025 –≥–æ–¥–∞, 256 –ì–ë",
            price=89990,
            category=electronics,
        )
        Product.objects.create(
            name="–ù–æ—É—Ç–±—É–∫ Lenovo ThinkPad X1",
            description="Core i7, 32 –ì–ë RAM, SSD 1 –¢–ë",
            price=189990,
            category=electronics,
        )
        Product.objects.create(
            name="–§—É—Ç–±–æ–ª–∫–∞ –±–µ–ª–∞—è",
            description="100% —Ö–ª–æ–ø–æ–∫, —Ä–∞–∑–º–µ—Ä M",
            price=1490,
            category=clothes,
        )
        Product.objects.create(
            name="–ö–Ω–∏–≥–∞ 'Django –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'",
            description="–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Django 5.0",
            price=990,
            category=books,
        )
        Product.objects.create(
            name="–ü—ã–ª–µ—Å–æ—Å Dyson V15",
            description="–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—ã–ª–µ—Å–æ—Å –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞",
            price=49990,
            category=appliances,
        )

        self.stdout.write(self.style.SUCCESS("‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!"))
        self.stdout.write(self.style.SUCCESS("üéâ –ö–æ–º–∞–Ω–¥–∞ fill_db –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"))