import io
import os
import uuid
import random
from urllib.request import urlopen
from urllib.error import URLError, HTTPError
from decimal import Decimal, ROUND_HALF_UP

from django.core.files.base import ContentFile
from django.core.management.base import BaseCommand
from django.core.management import call_command

from faker import Faker

from catalog.models import Category, Product


class Command(BaseCommand):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
    - –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ;
    - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã;
    - —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏ (--from-fixtures);
    - —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (--count N);
    - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å picsum.photos;
    - –±–µ–∑–æ–ø–∞—Å–Ω–∞ ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–∫—Å—Ç—É—Ä.
    """

    help = "–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏."

    def add_arguments(self, parser):
        parser.add_argument(
            "--from-fixtures",
            action="store_true",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä (catalog/fixtures/categories.json –∏ products.json).",
        )
        parser.add_argument(
            "--sample",
            action="store_true",
            help="–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).",
        )
        parser.add_argument(
            "--count",
            type=int,
            default=0,
            help="–°–æ–∑–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Faker).",
        )

    # ---------- helpers ----------

    def _fetch_random_image(self, width: int = 600, height: int = 400) -> bytes | None:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å picsum.photos –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.
        """
        seed = uuid.uuid4().hex  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∏–¥, —á—Ç–æ–±—ã –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–ª–æ—Å—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ
        url = f"https://picsum.photos/seed/{seed}/{width}/{height}"
        try:
            with urlopen(url, timeout=10) as resp:  # urllib —Å–∞–º —Å–ª–µ–¥—É–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
                content = resp.read()
                # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Ä–∞–∑–º–µ—Ä > 1KB
                if len(content) > 1024:
                    return content
        except (URLError, HTTPError, TimeoutError) as e:
            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}"))
        return None

    def _attach_random_image(self, product: Product, idx_hint: int | None = None) -> None:
        """
        –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ picsum.
        –û—à–∏–±–∫–∏ –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π.
        """
        content = self._fetch_random_image()
        if not content:
            return
        # –ò–º—è —Ñ–∞–π–ª–∞ –≤ –º–µ–¥–∏–∞-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        stem = f"prod_{product.pk or idx_hint or uuid.uuid4().hex}"
        filename = f"{stem}.jpg"  # picsum –æ—Ç–¥–∞—ë—Ç jpeg –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            product.image.save(filename, ContentFile(content), save=True)
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"))

    # ---------- main ----------

    def handle(self, *args, **options):
        fake = Faker("ru_RU")

        self.stdout.write("üßπ –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        Product.objects.all().delete()
        Category.objects.all().delete()

        # === 1) –§–∏–∫—Å—Ç—É—Ä—ã ===
        if options["from_fixtures"]:
            self.stdout.write("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä...")
            try:
                call_command("loaddata", "catalog/fixtures/categories.json")
                call_command("loaddata", "catalog/fixtures/products.json")
                self.stdout.write(self.style.SUCCESS("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä!"))
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–∫—Å—Ç—É—Ä: {e}"))
            return

        # === 2) –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
        self.stdout.write("üì¶ –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        categories = [
            Category.objects.create(name="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", description="–ì–∞–¥–∂–µ—Ç—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞"),
            Category.objects.create(name="–û–¥–µ–∂–¥–∞", description="–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞"),
            Category.objects.create(name="–ö–Ω–∏–≥–∏", description="–ü–µ—á–∞—Ç–Ω—ã–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏–∑–¥–∞–Ω–∏—è"),
            Category.objects.create(name="–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", description="–¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞"),
        ]

        # === 3) –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (--count) ===
        if options["count"] > 0:
            count = options["count"]
            self.stdout.write(f"üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {count} —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
            products_batch = []
            for i in range(count):
                category = random.choice(categories)
                name = fake.sentence(nb_words=3).replace(".", "")
                description = fake.text(max_nb_chars=160)
                price_cents = random.randint(10_000, 5_000_000)  # –æ—Ç 100.00 –¥–æ 50000.00
                price = (Decimal(price_cents) / Decimal("100")).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

                p = Product(
                    name=name,
                    description=description,
                    price=price,
                    category=category,
                )
                p.save()
                # –ø—Ä–∏–∫—Ä–µ–ø–∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –æ–¥–Ω–æ–π, —á—Ç–æ–±—ã pk —É–∂–µ –±—ã–ª
                self._attach_random_image(p, idx_hint=i + 1)
                products_batch.append(p)

            self.stdout.write(self.style.SUCCESS(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤!"))
            return

        # === 4) –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä ===
        self.stdout.write("üõ† –°–æ–∑–¥–∞—ë–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
        electronics, clothes, books, appliances = categories

        items = [
            dict(name="–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung S24", description="–§–ª–∞–≥–º–∞–Ω 2025 –≥–æ–¥–∞, 256 –ì–ë",
                 price=89990, category=electronics),
            dict(name="–ù–æ—É—Ç–±—É–∫ Lenovo ThinkPad X1", description="Core i7, 32 –ì–ë RAM, SSD 1 –¢–ë",
                 price=189990, category=electronics),
            dict(name="–§—É—Ç–±–æ–ª–∫–∞ –±–µ–ª–∞—è", description="100% —Ö–ª–æ–ø–æ–∫, —Ä–∞–∑–º–µ—Ä M",
                 price=1490, category=clothes),
            dict(name="–ö–Ω–∏–≥–∞ ¬´Django –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö¬ª", description="–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Django 5",
                 price=990, category=books),
            dict(name="–ü—ã–ª–µ—Å–æ—Å Dyson V15", description="–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—ã–ª–µ—Å–æ—Å –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞",
                 price=49990, category=appliances),
        ]

        for i, data in enumerate(items, start=1):
            p = Product.objects.create(**data)
            self._attach_random_image(p, idx_hint=i)

        self.stdout.write(self.style.SUCCESS("‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!"))
        self.stdout.write(self.style.SUCCESS("üéâ –ö–æ–º–∞–Ω–¥–∞ fill_db –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"))