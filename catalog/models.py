from django.core.exceptions import ValidationError
from django.db import models

# üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
BANNED_WORDS = (
    "–∫–∞–∑–∏–Ω–æ",
    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "–∫—Ä–∏–ø—Ç–∞",
    "–±–∏—Ä–∂–∞",
    "–¥–µ—à–µ–≤–æ",
    "–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
    "–æ–±–º–∞–Ω",
    "–ø–æ–ª–∏—Ü–∏—è",
    "—Ä–∞–¥–∞—Ä",
)


class Category(models.Model):
    """–ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞."""

    name = models.CharField(max_length=100, unique=True, verbose_name="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"

    def __str__(self):
        return self.name


class Product(models.Model):
    """–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞.
    –ú–æ–¥–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (clean) –∑–∞–ø—Ä–µ—â–∞–µ—Ç:
      - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã,
      - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BANNED_WORDS –≤ –ø–æ–ª—è—Ö name –∏ description (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
    save() –≤—ã–∑—ã–≤–∞–µ—Ç full_clean(), —á—Ç–æ–±—ã –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –≤–µ–∑–¥–µ:
    –≤ –∞–¥–º–∏–Ω–∫–µ, –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ö, —á–µ—Ä–µ–∑ ORM –∏ shell."""

    name = models.CharField(max_length=150, verbose_name="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    image = models.ImageField(
        upload_to="products/", blank=True, null=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name="products",
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    )
    price = models.DecimalField(
        max_digits=10, decimal_places=2, verbose_name="–¶–µ–Ω–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(
        auto_now=True, verbose_name="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    )

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"

    def __str__(self):
        return f"{self.name} ({self.category.name})"

    # ---------- –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–ï–õ–ò ----------
    def clean(self):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑ full_clean())."""
        errors = {}

        # 1) –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
        if self.price is not None and self.price < 0:
            errors["price"] = "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π."

        # 2) –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ name/description
        def hits(text: str) -> list[str]:
            if not text:
                return []
            low = text.lower()
            return [w for w in BANNED_WORDS if w in low]

        bad_in_name = hits(self.name or "")
        if bad_in_name:
            errors["name"] = (
                f"–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(bad_in_name)}."
            )

        bad_in_desc = hits(self.description or "")
        if bad_in_desc:
            errors["description"] = (
                f"–í –æ–ø–∏—Å–∞–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(bad_in_desc)}."
            )

        if errors:
            raise ValidationError(errors)

    def save(self, *args, **kwargs):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."""
        self.full_clean()  # –∑–∞–ø—É—Å–∫–∞–µ—Ç clean() –∏ field-level –ø—Ä–æ–≤–µ—Ä–∫–∏
        super().save(*args, **kwargs)


class Contact(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏."""

    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    phone = models.CharField(max_length=50, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(verbose_name="Email")
    address = models.CharField(max_length=255, verbose_name="–ê–¥—Ä–µ—Å")
    about = models.TextField(
        blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ / –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"
    )

    class Meta:
        verbose_name = "–ö–æ–Ω—Ç–∞–∫—Ç"
        verbose_name_plural = "–ö–æ–Ω—Ç–∞–∫—Ç—ã"

    def __str__(self):
        return self.name
