from django.contrib import messages
from django.contrib.auth import login, logout, authenticate, get_user_model
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.mail import send_mail
from django.shortcuts import redirect
from django.urls import reverse_lazy, reverse
from django.views.generic import FormView, TemplateView, UpdateView
from django.conf import settings

from .forms import UserRegistrationForm, EmailAuthenticationForm, ProfileForm, DeleteAccountForm

User = get_user_model()

class RegisterView(FormView):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ email+password —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π backend;
    - –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∏—Ç —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º backend;
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ;
    - —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é.
    """
    template_name = "users/register.html"
    form_class = UserRegistrationForm
    success_url = reverse_lazy("catalog:home")

    def form_valid(self, form):
        # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–æ—Ä–º–∞ —É–∂–µ —Ö–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å)
        user = form.save()

        # 2) –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π email backend
        email = user.email
        raw_password = form.cleaned_data.get("password1")
        authenticated_user = authenticate(self.request, email=email, password=raw_password)

        if authenticated_user is not None:
            # authenticate() –ø—Ä–æ—Å—Ç–∞–≤–∏–ª backend ‚Üí login –ø—Ä–æ–π–¥—ë—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
            login(self.request, authenticated_user)
        else:
            # –§–æ–ª–±—ç–∫: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º backend, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ValueError –ø—Ä–æ multiple backends
            login(self.request, user, backend="users.backends.EmailAuthBackend")

        # 3) –ü–∏—Å—å–º–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ –∞–¥—Ä–µ—Å, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (user.email)
        try:
            send_mail(
                subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SkyStore! üéâ",
                message=(
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.email}!\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ SkyStore. –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å üòä\n\n"
                    "‚Äî –ö–æ–º–∞–Ω–¥–∞ SkyStore"
                ),
                from_email=settings.DEFAULT_FROM_EMAIL,  # –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ .env
                recipient_list=[user.email],  # –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                fail_silently=False,
            )
        except Exception as e:
            messages.warning(self.request, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: {e}")

        messages.success(self.request, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã")
        return super().form_valid(form)


class LoginView(FormView):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é."""
    template_name = "users/login.html"
    form_class = EmailAuthenticationForm

    def form_valid(self, form):
        user = form.get_user()  # –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã –º—ã —É–∂–µ –≤—ã–∑–≤–∞–ª–∏ authenticate()
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —É user –Ω–µ—Ç backend (—Ä–µ–¥–∫–æ), –ª–æ–≥–∏–Ω–∏–º —á–µ—Ä–µ–∑ –Ω–∞—à backend
        try:
            login(self.request, user)
        except Exception:
            login(self.request, user, backend="users.backends.EmailAuthBackend")

        messages.success(self.request, "–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.", extra_tags="auth")
        next_url = self.request.GET.get("next")
        return redirect(next_url or reverse("catalog:home"))


class LogoutView(LoginRequiredMixin, TemplateView):
    """–í—ã—Ö–æ–¥ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é."""
    template_name = "users/logged_out.html"

    def dispatch(self, request, *args, **kwargs):
        logout(request)
        messages.info(request, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", extra_tags="auth")
        return redirect("catalog:home")

class ProfileUpdateView(LoginRequiredMixin, UpdateView):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."""
    model = User
    form_class = ProfileForm
    template_name = "users/profile_form.html"

    def get_object(self, queryset=None):
        return self.request.user

    def form_valid(self, form):
        messages.success(self.request, "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
        return super().form_valid(form)

    def get_success_url(self):
        # –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —ç—Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return reverse_lazy("users:profile_edit")


class AccountDeleteView(LoginRequiredMixin, FormView):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    template_name = "users/profile_confirm_delete.html"
    form_class = DeleteAccountForm
    success_url = reverse_lazy("catalog:home")  # –ø–æ–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs["user"] = self.request.user
        return kwargs

    def form_valid(self, form):
        user = self.request.user
        email = user.email
        # –≤—ã—Ö–æ–¥ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        logout(self.request)
        user.delete()
        messages.warning(self.request, f"–ê–∫–∫–∞—É–Ω—Ç {email} —É–¥–∞–ª—ë–Ω. –ù–∞–º –±—É–¥–µ—Ç –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å üò¢")
        return super().form_valid(form)
